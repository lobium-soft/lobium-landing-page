name: Deploy to DigitalOcean

on:
  push:
    branches:
      - deploy

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image locally
        run: |
          # Build the image locally
          docker build -t lobium-landing-page:latest .
          
          # Save the image to a tar file
          docker save -o lobium-landing-page.tar lobium-landing-page:latest
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.DIGITALOCEAN_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SSH_HOST ecdsa-sha2-nistp256 $(ssh-keyscan -t ecdsa $SSH_HOST 2>/dev/null | cut -d' ' -f3-)" >> ~/.ssh/known_hosts
      
      - name: Transfer Docker image to DigitalOcean Droplet
        env:
          SSH_HOST: ${{ secrets.DIGITALOCEAN_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          # Transfer the Docker image tar file to the droplet
          scp lobium-landing-page.tar $SSH_USERNAME@$SSH_HOST:/tmp/
      
      - name: Deploy to DigitalOcean Droplet with Zero Downtime
        env:
          SSH_HOST: ${{ secrets.DIGITALOCEAN_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        run: |
          ssh $SSH_USERNAME@$SSH_HOST << 'EOF'
            # Load the Docker image from the tar file
            docker load -i /tmp/lobium-landing-page.tar
            
            # Generate a timestamp for the new container name to ensure uniqueness
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            NEW_CONTAINER="lobium-landing-page-${TIMESTAMP}"
            
            # Get the name of the current running container (if any)
            CURRENT_CONTAINER=$(docker ps --filter "name=lobium-landing-page" --format "{{.Names}}" | grep -v "${NEW_CONTAINER}" | head -n 1)
            
            # Determine which port is currently in use by checking Nginx config
            CURRENT_PORT="8080"
            if [ -f "/etc/nginx/conf.d/lobium.conf" ]; then
              CURRENT_PORT=$(grep -oP "proxy_pass http://127.0.0.1:\K\d+" /etc/nginx/conf.d/lobium.conf || echo "8080")
            fi
            
            # Choose the alternate port for the new deployment
            if [ "${CURRENT_PORT}" = "8080" ]; then
              NEW_PORT="8081"
            else
              NEW_PORT="8080"
            fi
            
            echo "Current container: ${CURRENT_CONTAINER:-none} on port ${CURRENT_PORT}"
            echo "New container: ${NEW_CONTAINER} will use port ${NEW_PORT}"
            
            # Start the new container on the alternate port
            echo "Starting new container..."
            docker run -d \
              --name "${NEW_CONTAINER}" \
              --restart always \
              -p ${NEW_PORT}:8080 \
              lobium-landing-page:latest
            
            # Wait for the new container to be healthy
            echo "Waiting for new container to be ready..."
            sleep 10
            
            # Check if the new container is running properly
            if ! docker ps | grep -q "${NEW_CONTAINER}"; then
              echo "New container failed to start properly. Rolling back..."
              docker logs "${NEW_CONTAINER}"
              docker rm -f "${NEW_CONTAINER}" || true
              exit 1
            fi
            
            echo "New container is running properly."
            
            # Update the Nginx configuration to route traffic to the new container
            # This assumes you have Nginx set up as a reverse proxy
            # If you don't have Nginx, we can modify this to use a different approach
            
            cat > /etc/nginx/conf.d/lobium.conf << EOT
              server {
                  listen 80;
                  server_name _;
                  
                  location / {
                      proxy_pass http://127.0.0.1:${NEW_PORT};
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
            EOT
            
            # Reload Nginx to apply the configuration change
            nginx -t && systemctl reload nginx
            
            # Wait a moment before cleaning up
            sleep 5
            
            # Remove the old container if it exists
            if [ -n "${CURRENT_CONTAINER}" ]; then
              echo "Removing old container: ${CURRENT_CONTAINER}"
              docker stop "${CURRENT_CONTAINER}" || true
              docker rm "${CURRENT_CONTAINER}" || true
            fi
            
            # Clean up
            docker image prune -f
            rm /tmp/lobium-landing-page.tar
            
            # Verify deployment
            docker ps | grep "${NEW_CONTAINER}"
            echo "Deployment completed successfully with zero downtime!"
          EOF

      # Add a final message with the application URL
      - name: Display Application URL
        env:
          SSH_HOST: ${{ secrets.DIGITALOCEAN_HOST }}
        run: |
          echo "Deployment completed successfully!"
          echo "Application is running at: http://$SSH_HOST:8080"
